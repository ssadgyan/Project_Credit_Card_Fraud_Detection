# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16yloR5rr5sLSas4IwTtyqcAKHNfheAQA
"""

import pandas as pd

from google.colab import files
uploaded=files.upload()
data = pd.read_csv("creditcard.csv")

data.head()

pd.options.display.max_columns = None

data.head()

data.tail()

data.shape

print("Number of column: {}" .format(data.shape[1]))
print("Number of rows: {}" .format(data.shape[0]))

data.info()

data.isnull().sum()

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
data['Amount'] = sc.fit_transform(pd.DataFrame(data['Amount']))

data.head()

data =data.drop(['Time'],axis =1)

data.head()

data.duplicated().any()

data = data.drop_duplicates()

data.shape

data['Class'].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('ggplot')

print(data['Class'].value_counts())

sns.countplot(data['Class'])
plt.show()

X = data.drop('Class', axis = 1)
y= data['Class']

X = data.drop('Class', axis = 1)
y= data['Class']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score

classifier = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree Classifier": DecisionTreeClassifier()
}

for name, clf in classifier.items():
    print(f"\n============{name}=============")
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(f"\n Accuracy: { accuracy_score(y_test, y_pred)}")
    print(f"\n Precision: {precision_score(y_test, y_pred)}")
    print(f"\n Recall: {recall_score(y_test, y_pred)}")
    print(f"\n F1 Score: {f1_score(y_test, y_pred)}")

"""Undersampling the data

"""

normal = data[data['Class']==0]
fraud = data[data['Class']==1]

fraud.shape

normal.shape

normal_sample = normal.sample(n=473)

normal_sample.shape

new_data = pd.concat([normal_sample,fraud], ignore_index=True)
new_data.head()

new_data['Class'].value_counts()

X = new_data.drop('Class', axis = 1)
y = new_data['Class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

classifier = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree Classifier": DecisionTreeClassifier()
}

for name, clf in classifier.items():
    print(f"\n============{name}=============")
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(f"\n Accuracy: { accuracy_score(y_test, y_pred)}")
    print(f"\n Precision: {precision_score(y_test, y_pred)}")
    print(f"\n Recall: {recall_score(y_test, y_pred)}")
    print(f"\n F1 Score: {f1_score(y_test, y_pred)}")

"""# OVERSMAPLING"""

X = data.drop('Class', axis = 1)
y = data['Class']

X.shape

y.shape

from imblearn.over_sampling import SMOTE

X_res, y_res = SMOTE().fit_resample(X,y)

y_res.value_counts()

X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size = 0.2, random_state = 42)

classifier = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree Classifier": DecisionTreeClassifier()
}

for name, clf in classifier.items():
    print(f"\n============{name}=============")
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(f"\n Accuracy: { accuracy_score(y_test, y_pred)}")
    print(f"\n Precision: {precision_score(y_test, y_pred)}")
    print(f"\n Recall: {recall_score(y_test, y_pred)}")
    print(f"\n F1 Score: {f1_score(y_test, y_pred)}")

dtc = DecisionTreeClassifier()
dtc.fit(X_res, y_res)

import joblib

joblib.dump(dtc, 'credit_card_model.pkl')

model = joblib.load('credit_card_model.pkl')

pred = model.predict([[-1.3598071336738,-0.0727811733098497,2.53634673796914,1.37815522427443,-0.338320769942518,0.462387777762292,0.239598554061257,0.0986979012610507,0.363786969611213,0.0907941719789316,-0.551599533260813,-0.617800855762348,-0.991389847235408,-0.311169353699879,1.46817697209427,-0.470400525259478,0.207971241929242,0.0257905801985591,0.403992960255733,0.251412098239705,-0.018306777944153,0.277837575558899,-0.110473910188767,0.0669280749146731,0.128539358273528,-0.189114843888824,0.133558376740387,-0.0210530534538215,149.62]])

pred[0]

if pred == 0:
  print('Normal Transaction')
else:
  print('Fraud Transaction')